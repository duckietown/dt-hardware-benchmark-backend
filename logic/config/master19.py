from scipy import interpolate


def measurements(data_latency, data_segments, data_sd_card):
    return {
        'diagnostics': {
            'resources_stats': [
                {
                    'name': 'Memory in Percent',
                    'ylabel': 'RAM',
                    'ylim': (0, 100),
                    'keys': ['memory.used', 'memory.total'],
                    'calc': lambda x, y: 100 * x / y,
                    'export_name': 'ram_p',
                    'unit': '%',

                },
                {
                    'name': 'Swap in Percent',
                    'ylabel': 'Swap',
                    'ylim': (0, 100),
                    'keys': ['swap.used', 'swap.total'],
                    'calc': lambda x, y: 100 * x / y,
                    'export_name': 'swap_p',
                    'unit': '%',
                },
                {
                    'name': 'CPU Percent',
                    'ylabel': 'CPU',
                    'ylim': (0, 100),
                    'keys': ['cpu.pcpu'],
                    'export_name': 'cpu_p',
                    'unit': '%',
                },
            ],
            'health': [
                {
                    'name': 'Status',
                    'ylabel': 'Status [ok, warn, error]',
                    'ylim': (0, 2),
                    'format': lambda x: 2 if x == 'error' else 1 if x == 'warning' else 0,
                    'keys': ['status'],
                    'export_name': 'status_tribool',
                    'unit': ' ',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'CPU Temperature',
                    'ylabel': 'CPU',
                    'ylim': (0, 120),
                    'format': lambda i: i[0:-2],
                    'keys': ['temp'],
                    'export_name': 'cpu_temp_c',
                    'unit': 'Â°C',
                },
                {
                    'name': 'Core Voltage',
                    'ylabel': 'Core',
                    'ylim': (0, 1.5),
                    'format': lambda i: i[0:-1],
                    'keys': ['volts.core'],
                    'export_name': 'cpu_core_v',
                    'unit': 'V',
                },
                {
                    'name': 'Throttling',
                    'ylabel': 'Throttling [yes/no]',
                    'ylim': (0, 1),
                    'format': lambda x: 1 if x else 0,
                    'keys': ['throttled_humans.throttling-now'],
                    'export_name': 'throttling_bool',
                    'unit': ' ',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'Core Clock',
                    'ylabel': 'Core',
                    'ylim': (0, 600),
                    'calc': lambda x: x / 1000000,
                    'keys': ['clock.core'],
                    'export_name': 'cpu_core_clock',
                    'unit': 'MHz',
                },
                {
                    'name': 'ARM Clock',
                    'ylabel': 'ARM',
                    'ylim': (0, 2000),
                    'calc': lambda x: x / 1000000,
                    'keys': ['clock.arm'],
                    'export_name': 'cpu_arm_clock',
                    'unit': '?',
                },
            ],
            'containers_cfg': [ 
                {
                    'base_name' : ' Threads',
                    'ylabel': 'Threads',
                    'keys': 'process_stats.nthreads',
                    'unit': '#',
                },

                {
                    'base_name' : ' CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': 'container_stats.pcpu',
                    'unit': '%',
                },            
            ]
        }
    }
"""
            'process': [
                {
                    'name': 'Portainer Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_00_basic_portainer_1.nthreads'],
                    'export_name': 'portainer_threads',
                    'unit': '#',
                },
                {
                    'name': 'Watchtower Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_00_basic_watchtower_1.nthreads'],
                    'export_name': 'watchtower_threads',
                    'unit': '#',
                },
                {
                    'name': 'Duckiebot-dashboard Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_06_dashboard_dashboard_1.nthreads'],
                    'export_name': 'db_dashboard_threads',
                    'unit': '#',
                },
                # {
                #    'name': 'Device-online Threads',
                #    'ylabel': 'Threads',
                #    'keys': ['dt18_01_health_stats_rpi-duckiebot-online_1.nthreads'],
                #    'export_name': 'device_online_threads',
                #    'unit': '#',
                # },
                {
                    'name': 'Health Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_01_health_stats_rpi-health_1.nthreads'],
                    'export_name': 'health_threads',
                    'unit': '#',
                },
                {
                    'name': 'Simple-server Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_01_health_stats_rpi-simple-server_1.nthreads'],
                    'export_name': 'simple_server_threads',
                    'unit': '#',
                },
                {
                    'name': 'Rosbridge-websocket Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_06_dashboard_ros-websocket_1.nthreads'],
                    'export_name': 'rosbridge_websocket_threads',
                    'unit': '#',
                },
                # {
                #    'name': 'DB Loader Threads',
                #    'ylabel': 'Threads',
                #    'keys': ['dt18_01_health_stats_rpi-duckiebot-loader_1.nthreads'],
                #    'export_name': 'db_loader_threads',
                #    'unit': '#',
                # },
                # {
                #    'name': 'Demo_base Threads',
                #    'ylabel': 'Threads',
                #    'keys': ['demo_base.nthreads'],
                #    'export_name': 'demo_base_threads',
                #    'unit': '#',
                # },
                {
                    'name': 'Demo_lane_following Threads',
                    'ylabel': 'Threads',
                    'keys': ['demo_lane_following.nthreads'],
                    'export_name': 'demo_lane_following_threads',
                    'unit': '#',
                },
                {
                    'name': 'Interface Threads',
                    'ylabel': 'Threads',
                    'keys': ['dt18_03_roscore_duckiebot-interface_1.nthreads'],
                    'export_name': 'interface_threads',
                    'unit': '#',
                },
                # Useless as the Process is run on host PC
                # {
                #    'name': 'Dts-run-diagnostics-system-monitor Threads',
                #    'ylabel': 'Threads',
                #    'ylim': (0, 15),
                #    'keys': ['dts-run-diagnostics-system-monitor.nthreads'],
                #   'export_name': 'dts_run_diagnostics_system_monitor_threads',
                #    'unit': '#',
                # },
            ],
            'container': [
                {
                    'name': 'Portainer CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_00_basic_portainer_1.pcpu'],
                    'export_name': 'portainer_pcpu',
                    'unit': '%',
                },
                # {
                #    'name': 'Watchtower CPU in Percent',
                #    'ylabel': 'CPU',
                #    'keys': ['watchtower.pcpu'],
                #    'export_name': 'watchtower_pcpu',
                #    'unit': '%',
                # },
                {
                    'name': 'Duckiebot-dashboard CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_06_dashboard_dashboard_1.pcpu'],
                    'export_name': 'db_dashboard_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Device-online CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_01_health_stats_rpi-duckiebot-online_1.pcpu'],
                    'export_name': 'device_online_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Health CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_01_health_stats_rpi-health_1.pcpu'],
                    'export_name': 'health_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Simple-server CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_01_health_stats_rpi-simple-server_1.pcpu'],
                    'export_name': 'simple_server_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Rosbridge-websocket CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_06_dashboard_ros-websocket_1.pcpu'],
                    'export_name': 'rosbridge_websocket_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'DB Loader CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_01_health_stats_rpi-duckiebot-loader_1.pcpu'],
                    'export_name': 'db_loader_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Demo_base CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['demo_base.pcpu'],
                    'export_name': 'demo_base_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Demo_lane_following CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['demo_lane_following.pcpu'],
                    'export_name': 'demo_lane_following_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Interface CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dt18_03_roscore_duckiebot-interface_1.pcpu'],
                    'export_name': 'interface_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Dts-run-diagnostics-system-monitor CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dts-run-diagnostics-system-monitor.pcpu'],
                    'export_name': 'dts_run_diagnostics_system_monitor_pcpu',
                    'unit': '%',
                },
            ],
            'extern': [
                {
                    'name': 'Lane detector node latency',
                    'data': data_latency,
                    'ylabel': 'Latency',
                    'ylim': (0, 1000),
                    't0': min(data_latency.get('time')),
                    'keys': ['meas'],
                    'export_name': 'ldn_latency',
                    'unit': 'ms',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'Detected Segments',
                    'data': data_segments,
                    'ylabel': 'Segments',
                    't0': min(data_segments.get('time')),
                    'keys': ['meas'],
                    'export_name': 'ldn_segments',
                    'unit': '#',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                # {
                #     'name': 'SD-CardWrite Speed',
                #     'data': data_sd_card,
                #     'ylabel': 'Write Speed',
                #     'notime': True,
                #     'keys': ['meas'],
                #     'export_name': 'sd_card_write_speed',
                #     'unit': 'MB/s',
                # },
            ]
        }
    }"""

"""measurements = {
        'diagnostics': {
            'resources_stats': [
                {
                    'name': 'Memory in Percent',
                    'ylabel': 'RAM',
                    'ylim': (0, 100),
                    'keys': ['memory.used', 'memory.total'],
                    'calc': lambda x, y: 100*x/y,
                    'export_name': 'ram_p',
                    'unit': '%',

                },
                {
                    'name': 'Swap in Percent',
                    'ylabel': 'Swap',
                    'ylim': (0, 100),
                    'keys': ['swap.used', 'swap.total'],
                    'calc': lambda x, y: 100*x/y,
                    'export_name': 'swap_p',
                    'unit': '%',
                },
                {
                    'name': 'CPU Percent',
                    'ylabel': 'CPU',
                    'ylim': (0, 100),
                    'keys': ['cpu.pcpu'],
                    'export_name': 'cpu_p',
                    'unit': '%',
                },
            ],
            'health':[
                {
                    'name': 'Status',
                    'ylabel': 'Status [ok, warn, error]',
                    'ylim': (0, 2),
                    'format': lambda x: 2 if x == 'error' else 1 if x == 'warning' else 0,
                    'keys': ['status'],
                    'export_name': 'status_tribool',
                    'unit': ' ',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'CPU Temperature',
                    'ylabel': 'CPU',
                    'ylim': (0, 120),
                    'format': lambda i: i[0:-2],
                    'keys': ['temp'],
                    'export_name': 'cpu_temp_c',
                    'unit': 'Â°C',
                },
                {
                    'name': 'Core Voltage',
                    'ylabel': 'Core',
                    'ylim': (0, 1.5),
                    'format': lambda i: i[0:-1],
                    'keys': ['volts.core'],
                    'export_name': 'cpu_core_v',
                    'unit': 'V',
                },
                {
                    'name': 'Throttling',
                    'ylabel': 'Throttling [yes/no]',
                    'ylim': (0, 1),
                    'format': lambda x: 1 if x else 0,
                    'keys': ['throttled_humans.throttling-now'],
                    'export_name': 'throttling_bool',
                    'unit': ' ',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'Core Clock',
                    'ylabel': 'Core',
                    'ylim': (0, 600),
                    'calc': lambda x: x/1000000,
                    'keys': ['clock.core'],
                    'export_name': 'cpu_core_clock',
                    'unit': 'MHz',
                },
                {
                    'name': 'ARM Clock',
                    'ylabel': 'ARM',
                    'ylim': (0, 2000),
                    'calc': lambda x: x/1000000,
                    'keys': ['clock.arm'],
                    'export_name': 'cpu_arm_clock',
                    'unit': '?',
                },
            ],
            'process':[
                {
                    'name': 'Portainer Threads',
                    'ylabel': 'Threads',
                    'keys': ['portainer.nthreads'],
                    'export_name': 'portainer_threads',
                    'unit': '#',
                },
                {
                    'name': 'Watchtower Threads',
                    'ylabel': 'Threads',
                    'keys': ['watchtower.nthreads'],
                    'export_name': 'watchtower_threads',
                    'unit': '#',
                },
                {
                    'name': 'Duckiebot-dashboard Threads',
                    'ylabel': 'Threads',
                    'keys': ['duckiebot-dashboard.nthreads'],
                    'export_name': 'db_dashboard_threads',
                    'unit': '#',
                },
                {
                    'name': 'Device-online Threads',
                    'ylabel': 'Threads',
                    'keys': ['device-online.nthreads'],
                    'export_name': 'device_online_threads',
                    'unit': '#',
                },
                {
                    'name': 'Health Threads',
                    'ylabel': 'Threads',
                    'keys': ['health.nthreads'],
                    'export_name': 'health_threads',
                    'unit': '#',
                },
                {
                    'name': 'Simple-server Threads',
                    'ylabel': 'Threads',
                    'keys': ['simple-server.nthreads'],
                    'export_name': 'simple_server_threads',
                    'unit': '#',
                },
                {
                    'name': 'Rosbridge-websocket Threads',
                    'ylabel': 'Threads',
                    'keys': ['rosbridge-websocket.nthreads'],
                    'export_name': 'rosbridge_websocket_threads',
                    'unit': '#',
                },
                {
                    'name': 'Demo_all_drivers Threads',
                    'ylabel': 'Threads',
                    'keys': ['demo_all_drivers.nthreads'],
                    'export_name': 'demo_all_drivers_threads',
                    'unit': '#',
                },
                {
                    'name': 'Demo_all Threads',
                    'ylabel': 'Threads',
                    'keys': ['demo_all.nthreads'],
                    'export_name': 'demo_all_threads',
                    'unit': '#',
                },
                {
                    'name': 'Demo_lane_following Threads',
                    'ylabel': 'Threads',
                    'keys': ['demo_lane_following.nthreads'],
                    'export_name': 'demo_lane_following_threads',
                    'unit': '#',
                },
                {
                    'name': 'Acquisition-bridge Threads',
                    'ylabel': 'Threads',
                    'keys': ['acquisition-bridge.nthreads'],
                    'export_name': 'acquisition_bridge_threads',
                    'unit': '#',
                },
                # Useless as the Process is run on host PC
                #{
                #    'name': 'Dts-run-diagnostics-system-monitor Threads',
                #    'ylabel': 'Threads',
                #    'ylim': (0, 15),
                #    'keys': ['dts-run-diagnostics-system-monitor.nthreads'],
                #   'export_name': 'dts_run_diagnostics_system_monitor_threads',
                #    'unit': '#',
                #},
            ],
            'container':[
                {
                    'name': 'Portainer CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['portainer.pcpu'],
                    'export_name': 'portainer_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Watchtower CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['watchtower.pcpu'],
                    'export_name': 'watchtower_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Duckiebot-dashboard CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['duckiebot-dashboard.pcpu'],
                    'export_name': 'db_dashboard_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Device-online CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['device-online.pcpu'],
                    'export_name': 'device_online_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Health CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['health.pcpu'],
                    'export_name': 'health_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Simple-server CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['simple-server.pcpu'],
                    'export_name': 'simple_server_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Rosbridge-websocket CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['rosbridge-websocket.pcpu'],
                    'export_name': 'rosbridge_websocket_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Demo_all_drivers CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['demo_all_drivers.pcpu'],
                    'export_name': 'demo_all_drivers_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Demo_all CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['demo_all.pcpu'],
                    'export_name': 'demo_all_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Demo_lane_following CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['demo_lane_following.pcpu'],
                    'export_name': 'demo_lane_following_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Acquisition-bridge CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['acquisition-bridge.pcpu'],
                    'export_name': 'acquisition_bridge_pcpu',
                    'unit': '%',
                },
                {
                    'name': 'Dts-run-diagnostics-system-monitor CPU in Percent',
                    'ylabel': 'CPU',
                    'keys': ['dts-run-diagnostics-system-monitor.pcpu'],
                    'export_name': 'dts_run_diagnostics_system_monitor_pcpu',
                    'unit': '%',
                },
            ],
            'extern':[
                {
                    'name': 'Lane detector node latency',
                    'data': data_latency,
                    'ylabel': 'Latency',
                    'ylim': (0, 1000),
                    't0': min(data_latency.get('time')),
                    'keys': ['meas'],
                    'export_name': 'ldn_latency',
                    'unit': 'ms',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
                {
                    'name': 'Detected Segments',
                    'data': data_segments,
                    'ylabel': 'Segments',
                    't0': min(data_segments.get('time')),
                    'keys': ['meas'],
                    'export_name': 'ldn_segments',
                    'unit': '#',
                    'ip': lambda x, y: interpolate.interp1d(x, y, bounds_error=False)
                },
            ]
        }
    }"""


meta = {
    'time': 'general.time_iso',
    'target': 'general.target',
    'duration': 'general.duration',
    'cores': 'endpoint.NCPU',
    'mem': 'endpoint.MemTotal',
}
